(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    207587,       4390]
NotebookOptionsPosition[    201466,       4293]
NotebookOutlinePosition[    202079,       4315]
CellTagsIndexPosition[    202036,       4312]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 TemplateBox[{"\"this\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"Word\"", ",", "\"this\""}], "]"}], 
   "\"Entity[\\\"Word\\\", \\\"this\\\"]\"", "\"word\""},
  "Entity"]], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"b7e9ccd3-db12-46fe-a0b9-6c919c6bf73a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "Old", " ", "meg", " ", "a", " ", "k\[ODoubleDot]vetkez\[ODoubleAcute]", 
   " ", 
   RowBox[{"feladatot", ":", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"x", "^", "2"}], "-", 
     RowBox[{"5", "x"}]}]}]}], " ", "=", " ", "2"}]], "Input",
 CellChangeTimes->{{3.919947866070032*^9, 3.91994788421727*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"73edf71b-0ac8-4792-bed9-3d1530b05aef"],

Cell["2", "WolframAlphaLong",
 CellLabel->"In[45]:=",ExpressionUUID->"705830bd-830d-4b80-af47-d7bcdb494f4b"],

Cell["2", "WolframAlphaLong",
 CellLabel->"In[46]:=",ExpressionUUID->"a20c7c09-23f2-440b-ac0f-a941325fa183"],

Cell["2", "WolframAlphaLong",
 CellLabel->"In[47]:=",ExpressionUUID->"3e06bebc-34dd-4101-936a-ab630baf24e8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", 
   RowBox[{"(", "x", ")"}]}], "=", 
  RowBox[{
   RowBox[{"x", "^", "2"}], "-", 
   RowBox[{"3", "x"}], "+", "2"}]}]], "Input",
 CellChangeTimes->{{3.919947949594657*^9, 3.919947962611574*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"430742a3-1eca-4d1f-bfed-d64bbf699317"],

Cell["2 - 3*x + x^2", "WolframAlphaLong",
 CellLabel->"In[49]:=",ExpressionUUID->"b0a2630e-3f53-4611-af08-d7471b9a0e36"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "x"], 
  RowBox[{"(", 
   RowBox[{"2", "-", 
    RowBox[{"3", " ", "x"}], "+", 
    SuperscriptBox["x", "2"]}], ")"}]}]], "Input",
 NumberMarks->False,
 CellLabel->"In[50]:=",ExpressionUUID->"fe7e4d81-4e4c-41c7-bac2-78b45f54dc7f"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"2", "-", 
    RowBox[{"3", " ", "x"}], "+", 
    SuperscriptBox["x", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "16.5`"}], ",", "19.5`"}], "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[51]:=",ExpressionUUID->"8f0819ce-84fa-4900-ae3c-84dbb8628d21"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
   "Bontsd", " ", "fel", " ", "a", " ", "k\[ODoubleDot]vetkez\[ODoubleAcute]",
     " ", "m\[AAcute]trixot", " ", "LU"}], "-", 
   RowBox[{
    RowBox[{"ra", "!"}], "A"}]}], "=", 
  RowBox[{"[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"[", "2", "]"}], "[", "3", "]"}], "[", "32", "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"[", "23", "]"}], "[", "3", "]"}], "[", "21", "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"[", "67", "]"}], "[", "5", "]"}], "[", "7", "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.919948791682706*^9, 3.919948856471725*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[52]:=",ExpressionUUID->"dd484025-cb3d-43ed-837c-22bce7318746"],

Cell[BoxData[
 RowBox[{"CholeskyDecomposition", "[", 
  TagBox[
   RowBox[{"(", GridBox[{
      {"2", "1"},
      {"1", "2"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], "]"}]], "Input",
 CellChangeTimes->{{3.919948905386826*^9, 3.919948930084574*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"8deec363-a9f3-48eb-99e1-5c95acefd0fd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DivisorSigma", "[", 
   RowBox[{"1", ",", 
    RowBox[{"IntegerPart", "[", 
     RowBox[{"Det", "[", 
      RowBox[{"CholeskyDecomposition", "[", 
       TagBox[
        RowBox[{"(", GridBox[{
           {"2", "1"},
           {"1", "2"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]], "]"}], "]"}], "]"}]}], "]"}], "\[Equal]", 
  RowBox[{"2", " ", 
   RowBox[{"IntegerPart", "[", 
    RowBox[{"Det", "[", 
     RowBox[{"CholeskyDecomposition", "[", 
      TagBox[
       RowBox[{"(", GridBox[{
          {"2", "1"},
          {"1", "2"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]], "]"}], "]"}], "]"}]}]}]], "Input",
 NumberMarks->False,
 CellLabel->"In[53]:=",ExpressionUUID->"309e66b9-b702-490d-ae3f-f6816d20723f"],

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SqrtBox["2"], ",", 
      FractionBox["1", 
       SqrtBox["2"]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      SqrtBox[
       FractionBox["3", "2"]]}], "}"}]}], "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[54]:=",ExpressionUUID->"42ae6f8d-bb17-48ea-82a5-a3b513444999"],

Cell[BoxData[
 RowBox[{"SymmetricMatrixQ", "[", 
  RowBox[{"CholeskyDecomposition", "[", 
   TagBox[
    RowBox[{"(", GridBox[{
       {"2", "1"},
       {"1", "2"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[55]:=",ExpressionUUID->"af64cb93-a681-4ef9-8e78-20a6ea2df043"],

Cell[BoxData[
 RowBox[{"LUDecomposition", "[", 
  RowBox[{"(", GridBox[{
     {"42", "3"},
     {"43", "32"}
    }], ")"}], "]"}]], "Input",
 CellChangeTimes->{{3.919951789072334*^9, 3.9199518568634872`*^9}, {
  3.919951890928616*^9, 3.919951907302185*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"b03ac6d8-d587-4955-a6a1-a569b5b04e6e"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Length", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"42", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         FractionBox["43", "42"], ",", 
         FractionBox["405", "14"]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", "1", "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[57]:=",ExpressionUUID->"db362b1d-1dc7-43f8-bce5-a7479299e8f5"],

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"42", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["43", "42"], ",", 
        FractionBox["405", "14"]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", "0"}], "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[58]:=",ExpressionUUID->"4385ba25-0541-4723-bc5b-cd7135470630"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"LUDecomposition", "[", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"3", "3", "4"},
      {"4", "2", "2"},
      {"3", "3", "4"}
     }], "\[NoBreak]", ")"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.919952423930007*^9, 3.919952563969181*^9}, {
  3.919952595579471*^9, 3.919952604105778*^9}, {3.91995268861084*^9, 
  3.919952703569987*^9}, {3.9199528732166777`*^9, 3.919952908421343*^9}, {
  3.919953027748429*^9, 3.919953063632839*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"56eda9d5-33fc-44e5-87f3-90897b8b160a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["4", "3"], ",", 
       RowBox[{"-", "2"}], ",", 
       RowBox[{"-", 
        FractionBox["10", "3"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "0"}], "}"}]], "Input",
 CellChangeTimes->{
  3.919952739429688*^9, {3.919952800451898*^9, 3.91995280661819*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"532bd8f9-9a80-48b0-aca6-2e16772335bc"],

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["4", "3"], ",", 
        RowBox[{"-", "2"}], ",", 
        RowBox[{"-", 
         FractionBox["10", "3"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "0"}], "}"}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[61]:=",ExpressionUUID->"f443be38-7bd7-4932-846a-9a88209e1fec"],

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "3", ",", "4", ",", 
    FractionBox["4", "3"], ",", 
    RowBox[{"-", "2"}], ",", 
    RowBox[{"-", 
     FractionBox["10", "3"]}], ",", "1", ",", "0", ",", "0", ",", "1", ",", 
    "2", ",", "3", ",", "0"}], "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[62]:=",ExpressionUUID->"10e5fb00-fdb7-416d-b0a5-77d762267fdb"],

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "3", ",", "4", ",", 
    FractionBox["4", "3"], ",", 
    RowBox[{"-", "2"}], ",", 
    RowBox[{"-", 
     FractionBox["10", "3"]}], ",", "1", ",", "0", ",", "0", ",", "1", ",", 
    "2", ",", "3", ",", "0"}], "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[63]:=",ExpressionUUID->"5332f784-cec3-4317-b328-54b5f14daf32"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "4", ",", 
     FractionBox["4", "3"], ",", 
     RowBox[{"-", "2"}], ",", 
     RowBox[{"-", 
      FractionBox["10", "3"]}], ",", "1", ",", "0", ",", "0", ",", "1", ",", 
     "2", ",", "3", ",", "0"}], "}"}], ",", 
   RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
   RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[64]:=",ExpressionUUID->"d0976bd1-d9b2-4281-8a7a-3a821dcdf625"],

Cell[BoxData[
 RowBox[{"ArrayReshape", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         FractionBox["4", "3"], ",", 
         RowBox[{"-", "2"}], ",", 
         RowBox[{"-", 
          FractionBox["10", "3"]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "0"}], "}"}], ",", "3"}],
   "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[65]:=",ExpressionUUID->"90234307-2bfa-430d-9383-e8b824a3f799"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "2"}], "-", 
    RowBox[{"3", "x"}], "+", "10"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.919953701143634*^9, 3.919953755549598*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"1fd067e8-f621-4ccf-8bf0-b5bdf2af2dad"],

Cell["Rolle theorem", "WolframAlphaLong",
 CellChangeTimes->{{3.919953927931703*^9, 3.919953970701247*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"e8584fee-db61-4f4a-ab76-ca9a692925d9"],

Cell[CellGroupData[{

Cell["P\[EAcute]lda R programoz\[AAcute]sra", "Chapter",
 CellChangeTimes->{{3.919960145925623*^9, 
  3.919960152530416*^9}},ExpressionUUID->"a1ae286e-16ce-4933-be06-\
63ea1a78ca0b"],

Cell["IMPORT\[CapitalAAcute]L\[CapitalAAcute]S", "Text",
 CellChangeTimes->{{3.9199601819437847`*^9, 
  3.919960204734634*^9}},ExpressionUUID->"006ef8d6-af5c-4c4d-b82a-\
336e8d241e34"],

Cell[BoxData[{
 RowBox[{"Needs", "[", "\"\<RLink`\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"InstallR", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"\"\<RHomeLocation\>\"", "->", "\"\</usr/lib/R\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"\"\<RVersion\>\"", "->", "\"\<4.3.3\>\""}], ",", 
   RowBox[{
   "\"\<JRINativeLibraryLocation\>\"", "->", 
    "\"\</home/kmark7/R/x86_64-pc-linux-gnu-library/4.3/rJava/jri\>\""}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.919954871110272*^9, 3.919954880146912*^9}, {
   3.919955429010166*^9, 3.919955429771675*^9}, {3.919955674789139*^9, 
   3.9199556915210853`*^9}, 3.9199584161576767`*^9, {3.919958457233056*^9, 
   3.919958518965458*^9}, {3.919958552838566*^9, 3.9199585551074142`*^9}, {
   3.919958614504409*^9, 3.919958615616691*^9}, {3.9199586504310427`*^9, 
   3.919958654362173*^9}, {3.91995876989714*^9, 3.919958784480344*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"b0985dcf-4af9-43b3-ae4e-abe3078323c7"],

Cell["\<\
P\[CapitalEAcute]LDA K\[CapitalOAcute]D
A K\[CapitalOAcute]DOT MINDIG R\[CapitalEAcute]SZLETEKBEN KELL FUTTATNI!!!\
\>", "Text",
 CellChangeTimes->{{3.919960211296336*^9, 
  3.919960223556217*^9}},ExpressionUUID->"f2cc83e7-48b6-464c-8a14-\
0cde27a4ec7a"],

Cell[CellGroupData[{

Cell["\<\
# Adatok l\[EAcute]trehoz\[AAcute]sa
x <- c(1, 2, 3, 4, 5)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"R",
 CellChangeTimes->{
  3.9199588583771677`*^9, {3.919958904370833*^9, 3.919958905242487*^9}, {
   3.919959053505952*^9, 3.919959072919249*^9}, 3.919959123095535*^9, 
   3.919959173825202*^9, {3.91995952447643*^9, 3.919959533526252*^9}, {
   3.919959794844151*^9, 3.9199597962566557`*^9}, {3.919959924934355*^9, 
   3.919959941766539*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"3ea495a9-c8e9-4ff3-898f-5511770a78af"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "2.`", ",", "3.`", ",", "4.`", ",", "5.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.919960395680121*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"78d4e7b1-3a4f-4f63-92cd-6b0ef3418681"]
}, Open  ]],

Cell[CellGroupData[{

Cell["y <- c(2, 3, 5, 7, 11)", "ExternalLanguage",
 CellEvaluationLanguage->"R",
 CellChangeTimes->{{3.919959963040729*^9, 3.919959965518127*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"27f6e6da-216e-4e53-b96c-df4c28306d13"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.`", ",", "3.`", ",", "5.`", ",", "7.`", ",", "11.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.919960400371491*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"17cb8cfc-f85e-4d51-b5df-50dab01be1db"]
}, Open  ]],

Cell["\<\
# Vonaldiagram l\[EAcute]trehoz\[AAcute]sa
plot(x, y, type = \"l\", col = \"blue\", lwd = 2, 
     xlab = \"X tengely\", ylab = \"Y tengely\", 
     main = \"Egyszer\[UDoubleAcute] vonaldiagram\")\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"R",
 CellChangeTimes->{
  3.919959930323868*^9, {3.919960000336144*^9, 3.919960006954756*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"58643dfb-82e6-4883-a28a-c7634b249497"],

Cell["\<\
# Vonal c\[IAcute]mk\[EAcute]z\[EAcute]se
text(x, y, labels = y, pos = 3, col = \"red\")\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"R",
 CellChangeTimes->{3.9199600160250607`*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ec25026d-b3a1-438a-95d2-c8dda21583ab"],

Cell[BoxData[
 RowBox[{"//", "hello"}]], "Input",
 CellChangeTimes->{{3.919960285996585*^9, 3.9199603080150957`*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[15]:=",ExpressionUUID->"7a629271-a7e8-49bc-ad1a-9b3c4e3cfe83"],

Cell[CellGroupData[{

Cell["integrate x^2 sin^3 x dx", "WolframAlphaLong",
 CellChangeTimes->{{3.919961891097359*^9, 3.919961894280211*^9}, 
   3.919961938726492*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"dc79cafa-50fa-4053-be02-f538a9b863e0"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "integrate x^2 sin^3 x dx", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[x^2 Sin[x]^3, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "3"], "(", "x", ")"}]}], Identity], 
                    PrecedenceForm[#, 400.]& ], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["1", "108"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"81"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "-", "2"}], ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"9", " ", 
                    SuperscriptBox["x", "2"]}], "-", "2"}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}], "-", 
                    RowBox[{"6", " ", "x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"3", " ", "x"}], ")"}], "-", 
                    RowBox[{"27", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}]}], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                    FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(-81 (-2 + x^2) Cos[x] + (-2 + 9 x^2) Cos[3 x] - 6 x (-27 \
Sin[x] + Sin[3 x]))/108, {x, -4.2, 4.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max428$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min427$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min427$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max428$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1286197$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min427$\
1286202$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max428$1286203$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max428$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min427$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1286197$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min427$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min427$\
1286202$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max428$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max428$\
1286203$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1286173[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[
                    1, 108] ((-81) (-2 + $CellContext`x^2) 
                    Cos[$CellContext`x] + (-2 + 9 $CellContext`x^2) 
                    Cos[3 $CellContext`x] - 
                    6 $CellContext`x ((-27) Sin[$CellContext`x] + 
                    Sin[3 $CellContext`x])), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min427$$], 
                    (
                    Piecewise[{{
                    0. + 4.478005088967236 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    4.478005088967236 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min427$$], \
-4.1887902047863905`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min427$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max428$$]], 
                    (
                    Piecewise[{{
                    0. + 4.478005088967236 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 4.478005088967236 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min427$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max428$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min427$$ + 
                    0.008377580409572781, 
                    CalculateUtilities`GraphicsUtilities`Private`max428$$]], 
                    4.1887902047863905`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min427$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max428$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1286173]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1286173[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1286173[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkTpetC9IjG6MSQNKUr73ljiJhWsH29kGfx58dpM0a1cppgM0pR9O9aV5fPfcc9d7eiyCpN/\
r9dR1Yz4IFidbeHpizEjMclHweP8sl0QpKnhyDZ/dMSYkeo8w+EFi57tpzHshZ6Dd+Q2+\
DywqGGjyVVNGNSVqeiAhz2ikas9Y0hPzkykTETD6kzwbbu+\
8Hu68cjAYyxi0JpKrF20h80yCIkkPgW4Y844B/+aOj8vjp4KxkHwvCI+\
Iemi8EwmxgREcGObjfevVZuoeJqaBxyDjS6fJynPU9gKlJeXphMxyfONisoZtgUGmynFzv+RmnYJc+\
LfwgQhtTM5jk7ZnS6BfGFeMvvOy+ufcDfD8ti28FKericP8dhnyBpqeELVM5/\
PWdXKMVF1ro59zdVnzZaNBXjxl6v+lI6r0chjbbcMgs2NT49XaW4Z/2RZe5Nj1c3E/\
MOazc5SAq4ZDJbiPIi7YPIpmygMn0fbpqtw4HMbdiu8QnT4VrHACE2fZL7Y/\
HlXg9aYQYu2mG5AOr2dAQHJiXLHldo+mVI8ykBAZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ThbqDjrIvf1TcSi7nmgx5P+\
SapESuFf1trI805PJ4IjwjCfGCpl69OaySGoP0lv2gBAlz4BQh6S/zsd/\
cw8VKIFUHEtUlHYsDW5oz/yT6ZYGPCE911tyxPUeXd9tiNoE4rVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwHLyLiW"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(-81 (-2 + x^2) Cos[x] + (-2 + 9 x^2) Cos[3 x] - 6 x (-27 \
Sin[x] + Sin[3 x]))/108, {x, -25., 25.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max430$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min429$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max430$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1286296$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min429$\
1286297$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max430$1286298$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max430$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min429$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1286296$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min429$\
1286297$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max430$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max430$\
1286298$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1286274[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[
                    1, 108] ((-81) (-2 + $CellContext`x^2) 
                    Cos[$CellContext`x] + (-2 + 9 $CellContext`x^2) 
                    Cos[3 $CellContext`x] - 
                    6 $CellContext`x ((-27) Sin[$CellContext`x] + 
                    Sin[3 $CellContext`x])), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$], 
                    (
                    Piecewise[{{
                    0. + 26.868030533803413` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    26.868030533803413` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$], \
-25.13274122871834], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max430$$]], 
                    (
                    Piecewise[{{
                    0. + 26.868030533803413` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    26.868030533803413` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max430$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min429$$ + 
                    0.050265482457436686`, 
                    CalculateUtilities`GraphicsUtilities`Private`max430$$]], 
                    25.13274122871834]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min429$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max430$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1286274]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1286274[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1286274[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkVYmtC9IsI6NSQNKUr73ljiJhWsH29kGfx58dpM0a1cppgM0pR9O9aV5fPfcc9d7fiKCpN/\
r9dRNYz4IFidbeHpmzEjMclHw+P15LolSVPDkBj67Z0xI9D5h8IPEznfbmAMhZ6Dd+Q2+\
DywqGGjyVVNGNSVqeighz2ikas9Y0lPzkykTETD6k7zYHu6+\
Hu7uOBiMZQxaE8nVq7aQeSZBkaSHQLeM2WPAv7nj0/\
L4qWAsJN8LwiOiHhvvREJsYAQHhvl433q9mXqAiWngMcj4ymmy8hy1vUBpSXk6IbMc37icrO22wCBT\
5bh5WHKzTkEu/Dv4QIQ2JuexSduzJdAvjGtG30VZ/XPuBnh+2xZeirPVxGF+\
7xjyBpqeErVM58vWdXKMVF1ro59zdVXzZaNBXj5l6v+\
lY6r0chjDtmGQ2Ymp8WrtLcPvtIUXOXb9XNyPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G/\
4jtEp08FK5zAxFn2i+\
2PJxV4vSmEWLvpBqTD6xkQkJwYV2y53acp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmqNk\
oe6go+zLHxW3ksuFJkPej7gmKZFrRX8X6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWhRHVJx+LAlubcP4l+\
WeBjwlOdNXdsz9Hl3baYTSDOatUFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb8vYuJY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Expanded form of the integral", "scanner" -> 
     "Integral", "id" -> "ExpandedFormOfTheIntegral", "position" -> "300", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Expand[(-81 (-2 + x^2) Cos[x] + (-2 + 9 x^2) Cos[3 x] - 6 x (-27 \
Sin[x] + Sin[3 x]))/108]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["3", "4"]}], " ", 
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}]}], "+", 
                   RowBox[{
                    FractionBox["1", "12"], " ", 
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}], "+", 
                   RowBox[{
                    FractionBox["3", "2"], " ", "x", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "-", 
                   RowBox[{
                    FractionBox["1", "18"], " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}], "+", 
                   FractionBox[
                    RowBox[{"3", " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "2"], "-", 
                   RowBox[{
                    FractionBox["1", "54"], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming x>0", "scanner" -> "Integral", 
     "id" -> "AlternateFormAssumingAllVariablesAreRealAndPositive", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "PowerExpand[(-81 (-2 + x^2) Cos[x] + (-2 + 9 x^2) Cos[3 x] - 6 x \
(-27 Sin[x] + Sin[3 x]))/108, Assumptions -> {}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["3", "4"]}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "-", "2"}], ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}]}], "+", 
                   RowBox[{
                    FractionBox["1", "108"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"9", " ", 
                    SuperscriptBox["x", "2"]}], "-", "2"}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}], "-", 
                   RowBox[{
                    FractionBox["1", "18"], " ", "x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"3", " ", "x"}], ")"}], "-", 
                    RowBox[{"27", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}]}], ")"}]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Expanded trigonometric form", "scanner" -> "Integral", 
     "id" -> "TrigExpand", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigExpand[(-81 (-2 + x^2) Cos[x] + (-2 + 9 x^2) Cos[3 x] - 6 x (-27 \
Sin[x] + Sin[3 x]))/108]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 TagBox[
                  RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "2"], "-", 
                    RowBox[{
                    FractionBox["3", "4"], " ", 
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["cos", "3"], "(", "x", ")"}], "54"], "+", 
                    RowBox[{
                    FractionBox["1", "12"], " ", 
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "3"], "(", "x", ")"}]}], "+", 
                    RowBox[{
                    FractionBox["3", "2"], " ", "x", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "6"], " ", "x", " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", "x", ")"}], " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "18"], " ", 
                    RowBox[{"cos", "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{"cos", "(", "x", ")"}], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "18"], " ", "x", " ", 
                    RowBox[{
                    SuperscriptBox["sin", "3"], "(", "x", ")"}]}]}], 
                  HoldForm], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "TrigExpand__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateFormOfTheIntegral", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigFactor[(-81 (-2 + x^2) Cos[x] + (-2 + 9 x^2) Cos[3 x] - 6 x (-27 \
Sin[x] + Sin[3 x]))/108]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   FractionBox["1", "108"], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"162", "-", 
                    RowBox[{"81", " ", 
                    SuperscriptBox["x", "2"]}]}], ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"9", " ", 
                    SuperscriptBox["x", "2"]}], "-", "2"}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}], "+", 
                    RowBox[{"162", " ", "x", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "-", 
                    RowBox[{"6", " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}]}], ")"}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   FractionBox["1", "108"], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"9", " ", 
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}], "-", 
                    RowBox[{"81", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "-", "2"}], ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "+", 
                    RowBox[{"162", " ", "x", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "-", 
                    RowBox[{"6", " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}], "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}]}], ")"}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox["3", "2"], "-", 
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["x", "2"]}], "4"]}], ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["x", "2"], "12"], "-", 
                    FractionBox["1", "54"]}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}], "+", 
                   RowBox[{"x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "2"], "-", 
                    RowBox[{
                    FractionBox["1", "18"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}]}], ")"}]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternateFormOfTheIntegral__More"}, {}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Reduced trigonometric form", "scanner" -> "Integral", 
     "id" -> "TrigReduce", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigReduce[(-81 (-2 + x^2) Cos[x] + (-2 + 9 x^2) Cos[3 x] - 6 x (-27 \
Sin[x] + Sin[3 x]))/108]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 TagBox[
                  RowBox[{
                    FractionBox["1", "108"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"162", " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "-", 
                    RowBox[{"81", " ", 
                    RowBox[{"cos", "(", "x", ")"}], " ", 
                    SuperscriptBox["x", "2"]}], "+", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", "2"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"3", " ", "x"}], ")"}], " ", "9", " ", 
                    SuperscriptBox["x", "2"]}], "+", 
                    RowBox[{"162", " ", "x", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "-", 
                    RowBox[{"6", " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"3", " ", "x"}], ")"}]}]}], ")"}]}], HoldForm], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "TrigReduce__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "2", "datatypes" -> "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence,Sum", "timedoutpods" -> "", "timing" -> "3.5740000000000003", 
     "parsetiming" -> "0.329", "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa45701a0cgf5a9cf658b300002bb7ceh4i5e6b5621697175660060143921", "id" -> 
     "MSP45711a0cgf5a9cf658b300003d53300bg1a4247b", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa45721a0cgf5a9cf658b30000680ffb4ae5eb3i831697175660060143921", "version" -> 
     "2.6", "inputstring" -> "integrate x^2 sin^3 x dx"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "5", "datatypes" -> "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence,Sum", "timedoutpods" -> "", "timing" -> "5.253", "parsetimedout" -> 
     "false", "recalculate" -> "", "id" -> "", "parseidserver" -> "15", 
     "host" -> "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
     "", "version" -> "2.6", "inputstring" -> "integrate x^2 sin^3 x dx"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2024, 3, 27, 18, 7, 12.782532`7.859191874506774}, "Line" -> 2, 
    "SessionID" -> 18722997458317393200}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7}, Typeset`failedpods$$ = {8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "integrate x^2 sin^3 x dx"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1366., {708.8515625, 714.1484375}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa45701a0cgf5a9cf658b300002bb7ceh4i5e6b5621697175660060143921", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.9205480328418217`*^9},ExpressionUUID->"683a20ee-225e-47cd-99d1-\
9d4864eec7d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CholeskyDecomposition", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{3.919962205777248*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"b2209187-2492-443b-9c89-c7108ca773db"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SqrtBox["2"], ",", 
     FractionBox["1", 
      SqrtBox["2"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     SqrtBox[
      FractionBox["3", "2"]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.919962207962393*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"f80d9680-d21b-44c2-a6bb-4f641aaac731"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CholeskyDecomposition[{{2, 1}, {1, 2}}]", "WolframAlphaLong",
 CellChangeTimes->{3.919962251129694*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"b7c64489-b2c3-47e9-a17c-a124785485b8"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "CholeskyDecomposition[{{2, 1}, {1, 2}}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"CholeskyDecomposition[{{2, 1}, {1, 2}}]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Cholesky decomposition\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    TemplateBox[{
                    
                    GridBox[{{"2", "1"}, {"1", "2"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Eigen", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Nest[ConjugateTranspose, CholeskyDecomposition[{{2, 1}, {1, 2}}], \
3]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{
                  TemplateBox[{
                    
                    GridBox[{{"2", "1"}, {"1", "2"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )], "\[LongEqual]", 
                  TagBox[
                   RowBox[{"L", ".", 
                    
                    TemplateBox[{"L"}, "Transpose", SyntaxForm -> 
                    SuperscriptBox]}], HoldForm]}]}, {
                StyleBox["\"where\"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}, {
                RowBox[{"L", "\[LongEqual]", 
                  TagBox[
                   TemplateBox[{
                    GridBox[{{
                    SqrtBox["2"], "0"}, {
                    FractionBox["1", 
                    SqrtBox["2"]], 
                    SqrtBox[
                    FractionBox["3", "2"]]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], Identity]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{1}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    Cell[
                    TextData[{
                    StyleBox["Find a lower\[Hyphen]triangular matrix ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["L", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[" such that", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[NoBreak]", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[":", 
                    GrayLevel[0.3], StripOnInput -> False]}]]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    TagBox[
                    TemplateBox[{
                    
                    GridBox[{{"2", "1"}, {"1", "2"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], HoldForm], 
                    AutoMultiplicationSymbol -> True], "\[LongEqual]", 
                    RowBox[{"L", ".", 
                    
                    TemplateBox[{"L"}, "Transpose", SyntaxForm -> 
                    SuperscriptBox]}]}], HoldForm], AutoMultiplicationSymbol -> 
                    True]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    Cell[
                    TextData[{
                    StyleBox["Denote the element in the ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["i", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[Hyphen]th row and ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["j", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[Hyphen]th column by ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["a", 
                    RowBox[{"i", ",", "j"}]], TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[NoBreak]", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[":", 
                    GrayLevel[0.3], StripOnInput -> False]}]]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TemplateBox[{
                    GridBox[{{
                    SubscriptBox["a", 
                    RowBox[{"1", ",", "1"}]], 
                    SubscriptBox["a", 
                    RowBox[{"1", ",", "2"}]]}, {
                    SubscriptBox["a", 
                    RowBox[{"2", ",", "1"}]], 
                    SubscriptBox["a", 
                    RowBox[{"2", ",", "2"}]]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], "\[LongEqual]", 
                    TagBox[
                    TemplateBox[{
                    
                    GridBox[{{"2", "1"}, {"1", "2"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], Identity]}], HoldForm], 
                    AutoMultiplicationSymbol -> True]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    Cell[
                    TextData[{
                    StyleBox[
                    "Define an initial lower\[Hyphen]triangular matrix ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["L", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[" with symbolic entries", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[NoBreak]", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[":", 
                    GrayLevel[0.3], StripOnInput -> False]}]]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"L", "\[LongEqual]", 
                    TemplateBox[{
                    GridBox[{{
                    SubscriptBox["l", 
                    RowBox[{"1", ",", "1"}]], "0"}, {
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "1"}]], 
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "2"}]]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )]}], HoldForm], 
                    AutoMultiplicationSymbol -> True]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    Cell[
                    TextData[{
                    StyleBox[
                    "The Cholesky algorithm uses the following formula for \
the (", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["i", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[",", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["j", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[") entry of ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["L", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[NoBreak]", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[":", 
                    GrayLevel[0.3], StripOnInput -> False]}]]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["l", 
                    RowBox[{"i", ",", "j"}]], "\[LongEqual]", 
                    TagBox[
                    GridBox[{{"\[Piecewise]", 
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    SqrtBox[
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", 
                    RowBox[{"j", ",", "j"}]], "-", 
                    PaneBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], 
                    StyleBox[
                    TagBox[
                    RowBox[{"j", "-", "1"}], HoldForm], 
                    AutoMultiplicationSymbol -> True]], 
                    SubsuperscriptBox["l", 
                    RowBox[{"j", ",", "k"}], "2"]}], 
                    BaseStyle -> {ScriptLevel -> 0}]}], HoldForm], 
                    AutoMultiplicationSymbol -> True]], HoldForm], 
                    AutoMultiplicationSymbol -> True], 
                    RowBox[{"i", "\[LongEqual]", "j"}]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox["1", 
                    SubscriptBox["l", 
                    RowBox[{"j", ",", "j"}]]], "\[CenterDot]", 
                    RowBox[{"(", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", 
                    RowBox[{"i", ",", "j"}]], "-", 
                    PaneBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], 
                    StyleBox[
                    TagBox[
                    RowBox[{"j", "-", "1"}], HoldForm], 
                    AutoMultiplicationSymbol -> True]], 
                    RowBox[{
                    SubscriptBox["l", 
                    RowBox[{"i", ",", "k"}]], " ", 
                    SubscriptBox["l", 
                    RowBox[{"j", ",", "k"}]]}]}], 
                    BaseStyle -> {ScriptLevel -> 0}]}], HoldForm], 
                    AutoMultiplicationSymbol -> True], "\[NoBreak]", ")"}]}], 
                    HoldForm], AutoMultiplicationSymbol -> True], 
                    RowBox[{"i", ">", "j"}]}, {"\"0\"", 
                    RowBox[{"i", "<", "j"}]}}, ColumnAlignments -> {Left}, 
                    ColumnSpacings -> 1.2, ColumnWidths -> Automatic, 
                    AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                    Editable -> True]}}, ColumnAlignments -> {Left}, 
                    ColumnSpacings -> 0.5, ColumnWidths -> Automatic], 
                    "Piecewise", SyntaxForm -> Span, SelectWithContents -> 
                    True, StripWrapperBoxes -> True, Selectable -> False, 
                    Editable -> False, DeleteWithContents -> True]}], 
                    HoldForm], AutoMultiplicationSymbol -> True]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    Cell[
                    TextData[{
                    StyleBox["Use the formula to compute ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["l", 
                    RowBox[{"1", ",", "1"}]], TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[", then substitute into ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["L", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[NoBreak]", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[":", 
                    GrayLevel[0.3], StripOnInput -> False]}]]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["l", 
                    RowBox[{"1", ",", "1"}]], "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    SqrtBox[
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", 
                    RowBox[{"1", ",", "1"}]], "-", 
                    PaneBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "0"], 
                    SubsuperscriptBox["l", 
                    RowBox[{"1", ",", "k"}], "2"]}], 
                    BaseStyle -> {ScriptLevel -> 0}]}], HoldForm], 
                    AutoMultiplicationSymbol -> True]], HoldForm], 
                    AutoMultiplicationSymbol -> True], "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    SqrtBox[
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", 
                    RowBox[{"1", ",", "1"}]], "+", "0"}], HoldForm], 
                    AutoMultiplicationSymbol -> True]], HoldForm], 
                    AutoMultiplicationSymbol -> True], "\[LongEqual]", 
                    SqrtBox[
                    SubscriptBox["a", 
                    RowBox[{"1", ",", "1"}]]], "\[LongEqual]", 
                    SqrtBox["2"]}], HoldForm], AutoMultiplicationSymbol -> 
                    True]}, {
                    RowBox[{"L", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    TemplateBox[{
                    GridBox[{{
                    FrameBox[
                    SqrtBox["2"], FrameStyle -> GrayLevel[0.8], FrameMargins -> 
                    1, BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "0"}, {
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "1"}]], 
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "2"}]]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], HoldForm], 
                    AutoMultiplicationSymbol -> True]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], HoldForm], AutoMultiplicationSymbol -> True]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    Cell[
                    TextData[{
                    StyleBox["Use the formula to compute ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "1"}]], TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[", then substitute into ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["L", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[NoBreak]", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[":", 
                    GrayLevel[0.3], StripOnInput -> False]}]]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "1"}]], "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox["1", 
                    SubscriptBox["l", 
                    RowBox[{"1", ",", "1"}]]], "\[CenterDot]", 
                    RowBox[{"(", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", 
                    RowBox[{"2", ",", "1"}]], "-", 
                    PaneBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "0"], 
                    RowBox[{
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "k"}]], " ", 
                    SubscriptBox["l", 
                    RowBox[{"1", ",", "k"}]]}]}], 
                    BaseStyle -> {ScriptLevel -> 0}]}], HoldForm], 
                    AutoMultiplicationSymbol -> True], "\[NoBreak]", ")"}]}], 
                    HoldForm], AutoMultiplicationSymbol -> True], 
                    "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox["1", 
                    SubscriptBox["l", 
                    RowBox[{"1", ",", "1"}]]], "\[CenterDot]", 
                    RowBox[{"(", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", 
                    RowBox[{"2", ",", "1"}]], "-", "0"}], HoldForm], 
                    AutoMultiplicationSymbol -> True], "\[NoBreak]", ")"}]}], 
                    HoldForm], AutoMultiplicationSymbol -> True], 
                    "\[LongEqual]", 
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox["2"]], "\[CenterDot]", 
                    RowBox[{"(", "1", ")"}]}], "\[LongEqual]", 
                    FractionBox["1", 
                    SqrtBox["2"]]}], HoldForm], AutoMultiplicationSymbol -> 
                    True]}, {
                    RowBox[{"L", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    TemplateBox[{
                    GridBox[{{
                    SqrtBox["2"], "0"}, {
                    FrameBox[
                    FractionBox["1", 
                    SqrtBox["2"]], FrameStyle -> GrayLevel[0.8], FrameMargins -> 
                    1, BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], 
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "2"}]]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], HoldForm], 
                    AutoMultiplicationSymbol -> True]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], HoldForm], AutoMultiplicationSymbol -> True]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    Cell[
                    TextData[{
                    StyleBox["Use the formula to compute ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "2"}]], TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[", then substitute into ", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox["L", TraditionalForm]]], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[NoBreak]", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[":", 
                    GrayLevel[0.3], StripOnInput -> False]}]]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["l", 
                    RowBox[{"2", ",", "2"}]], "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    SqrtBox[
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", 
                    RowBox[{"2", ",", "2"}]], "-", 
                    PaneBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "1"], 
                    SubsuperscriptBox["l", 
                    RowBox[{"2", ",", "k"}], "2"]}], 
                    BaseStyle -> {ScriptLevel -> 0}]}], HoldForm], 
                    AutoMultiplicationSymbol -> True]], HoldForm], 
                    AutoMultiplicationSymbol -> True], "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    SqrtBox[
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", 
                    RowBox[{"2", ",", "2"}]], "-", 
                    SubsuperscriptBox["l", 
                    RowBox[{"2", ",", "1"}], "2"]}], HoldForm], 
                    AutoMultiplicationSymbol -> True]], HoldForm], 
                    AutoMultiplicationSymbol -> True], "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    SqrtBox[
                    StyleBox[
                    TagBox[
                    RowBox[{"2", "-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", 
                    SqrtBox["2"]], ")"}], "2"]}], HoldForm], 
                    AutoMultiplicationSymbol -> True]], HoldForm], 
                    AutoMultiplicationSymbol -> True], "\[LongEqual]", 
                    SqrtBox[
                    FractionBox["3", "2"]]}], HoldForm], 
                    AutoMultiplicationSymbol -> True]}, {
                    RowBox[{"L", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    TemplateBox[{
                    GridBox[{{
                    SqrtBox["2"], "0"}, {
                    FractionBox["1", 
                    SqrtBox["2"]], 
                    FrameBox[
                    SqrtBox[
                    FractionBox["3", "2"]], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False]}}, 
                    RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> 
                    Baseline, ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], HoldForm], 
                    AutoMultiplicationSymbol -> True]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], HoldForm], AutoMultiplicationSymbol -> True]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    Cell[
                    TextData[{
                    StyleBox["Write the Cholesky decomposition", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\[NoBreak]", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[":", 
                    GrayLevel[0.3], StripOnInput -> False]}]]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Roboto", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    TemplateBox[{
                    
                    GridBox[{{"2", "1"}, {"1", "2"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], "\[LongEqual]", 
                    RowBox[{"L", ".", 
                    
                    TemplateBox[{"L"}, "Transpose", SyntaxForm -> 
                    SuperscriptBox]}]}]}, {
                    StyleBox["\"where\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    RowBox[{"L", "\[LongEqual]", 
                    TemplateBox[{
                    GridBox[{{
                    SqrtBox["2"], "0"}, {
                    FractionBox["1", 
                    SqrtBox["2"]], 
                    SqrtBox[
                    FractionBox["3", "2"]]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], HoldForm], AutoMultiplicationSymbol -> True]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]], Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "m^T gives the transpose of m"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/Transpose.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Transpose.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Result__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.397", "parsetiming" -> "0.225", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP999114d6h63ah66hi9dh00005abf12a81d9cc669", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "11", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa999214d6h63ah66hi9dh00005ebid0a7d7facai75481992349747128482", "version" -> 
    "2.6", "inputstring" -> "CholeskyDecomposition[{{2, 1}, {1, 2}}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2024, 3, 20, 23, 24, 14.555878`7.91561339223439}, "Line" -> 4, 
    "SessionID" -> 18719157022065209924}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "CholeskyDecomposition[{{2, 1}, {1, 2}}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{479.08000000000004`, {530.600546875, 534.479453125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.9199622545681133`*^9},ExpressionUUID->"493da36b-c960-4119-9491-\
a49735a8c59f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["M\[AAcute]trix felbont\[AAcute]sok", "Section",
 CellChangeTimes->{{3.920186365695909*^9, 
  3.9201863694400806`*^9}},ExpressionUUID->"b46a2f46-3b42-4ed4-9934-\
25e51dab12ff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"lu", ",", "p", ",", "c"}], "}"}], "=", 
  RowBox[{"LUDecomposition", "[", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"7", 
       RowBox[{"-", "3"}], "12", "4"},
      {"1", "5", "3", 
       RowBox[{"-", "10"}]},
      {"13", "7", "8", "2"},
      {
       RowBox[{"-", "5"}], "1", "0", "6"}
     }], "\[NoBreak]", ")"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.920185857332869*^9, 3.92018591124442*^9}, {
   3.920185953582809*^9, 3.920186008068163*^9}, {3.920186045587088*^9, 
   3.920186049044726*^9}, 3.920186242014906*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"736d6744-bcd8-4066-9ac0-cb5cc16fd29e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "3", ",", 
       RowBox[{"-", "10"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "5"}], ",", "26", ",", "15", ",", 
       RowBox[{"-", "44"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", 
       RowBox[{"-", 
        FractionBox["29", "13"]}], ",", 
       FractionBox["32", "13"], ",", 
       FractionBox["440", "13"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", 
       RowBox[{"-", 
        FractionBox["19", "13"]}], ",", 
       FractionBox["21", "4"], ",", 
       RowBox[{"-", "168"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "3", ",", "1"}], "}"}], ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.920186050528831*^9, 3.920186244296782*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"8d7557df-1f5d-45eb-a0ed-b191b45d9b3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"l", "=", 
   RowBox[{
    RowBox[{"LowerTriangularize", "[", 
     RowBox[{"lu", ",", 
      RowBox[{"-", "1"}]}], "]"}], "+", 
    RowBox[{"IdentityMatrix", "[", "4", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.920186263097791*^9, {3.920186294763053*^9, 3.920186296281746*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"982c01d7-92da-40c1-88b3-5cf41d647c54"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", "0"},
     {
      RowBox[{"-", "5"}], "1", "0", "0"},
     {"13", 
      RowBox[{"-", 
       FractionBox["29", "13"]}], "1", "0"},
     {"7", 
      RowBox[{"-", 
       FractionBox["19", "13"]}], 
      FractionBox["21", "4"], "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.92018626515586*^9, 3.920186298727808*^9},
 CellLabel->
  "Out[14]//MatrixForm=",ExpressionUUID->"963c27af-3027-4cb5-9867-\
2902be286261"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"u", "=", 
   RowBox[{"UpperTriangularize", "[", "lu", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.920186280500266*^9, 3.9201862873773203`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"d5ec3256-ce73-44ca-b41e-c42ec5e207fb"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "5", "3", 
      RowBox[{"-", "10"}]},
     {"0", "26", "15", 
      RowBox[{"-", "44"}]},
     {"0", "0", 
      FractionBox["32", "13"], 
      FractionBox["440", "13"]},
     {"0", "0", "0", 
      RowBox[{"-", "168"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.920186282849395*^9, 3.9201862887022343`*^9}},
 CellLabel->
  "Out[13]//MatrixForm=",ExpressionUUID->"311a8f84-c3bf-4ca6-b5b3-\
0d10bf9b6b78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"q", ",", " ", "r"}], "}"}], "=", 
  RowBox[{"QRDecomposition", "[", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"7", "5"},
      {"3", "2"}
     }], "\[NoBreak]", ")"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.920197293465741*^9, 3.920197330723517*^9}, 
   3.920197368842531*^9, {3.920197402881568*^9, 3.920197403515551*^9}, 
   3.920197524179751*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"05a06916-8256-4cc7-bf33-f2eb38bc9b61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox["7", 
        SqrtBox["58"]], ",", 
       FractionBox["3", 
        SqrtBox["58"]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["3", 
        SqrtBox["58"]], ",", 
       RowBox[{"-", 
        FractionBox["7", 
         SqrtBox["58"]]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SqrtBox["58"], ",", 
       FractionBox["41", 
        SqrtBox["58"]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       FractionBox["1", 
        SqrtBox["58"]]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.920197334952256*^9, 3.920197372786683*^9, 
  3.920197404890959*^9, 3.9201975258485327`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"4af507fa-af59-42ba-a265-44f38aba0c2f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"q", "//", "MatrixForm"}], ",", 
   RowBox[{"r", "//", "MatrixForm"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.9201974073657017`*^9, 3.920197418811722*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"c20bbdbe-39b1-419f-84f9-3ba1fbbe3634"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        FractionBox["7", 
         SqrtBox["58"]], 
        FractionBox["3", 
         SqrtBox["58"]]},
       {
        FractionBox["3", 
         SqrtBox["58"]], 
        RowBox[{"-", 
         FractionBox["7", 
          SqrtBox["58"]]}]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        SqrtBox["58"], 
        FractionBox["41", 
         SqrtBox["58"]]},
       {"0", 
        FractionBox["1", 
         SqrtBox["58"]]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{{3.92019741033983*^9, 3.920197421676775*^9}},
 CellLabel->"Out[5]=",ExpressionUUID->"588a8318-274b-402b-b28c-311186b278bd"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->"MultipurposeBar",
WindowSize->{1440, 771.75},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->{},
TaggingRules-><|
 "TryRealOnly" -> False, "NotebookTemplateVersion" -> 2., "NotebookTemplate" -> 
  True, "GeneratedNotebookOptions" -> {}|>,
CellContext->Notebook,
FrontEndVersion->"14.0 for Linux x86 (64-bit) (December 12, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"90e8d141-ebf2-4ccf-83ec-ecb2369e08e6"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 279, 6, 40, "Input",ExpressionUUID->"b7e9ccd3-db12-46fe-a0b9-6c919c6bf73a"],
Cell[840, 28, 428, 10, 50, "Input",ExpressionUUID->"73edf71b-0ac8-4792-bed9-3d1530b05aef"],
Cell[1271, 40, 108, 1, 40, "WolframAlphaLong",ExpressionUUID->"705830bd-830d-4b80-af47-d7bcdb494f4b"],
Cell[1382, 43, 108, 1, 40, "WolframAlphaLong",ExpressionUUID->"a20c7c09-23f2-440b-ac0f-a941325fa183"],
Cell[1493, 46, 108, 1, 40, "WolframAlphaLong",ExpressionUUID->"3e06bebc-34dd-4101-936a-ab630baf24e8"],
Cell[1604, 49, 312, 8, 29, "Input",ExpressionUUID->"430742a3-1eca-4d1f-bfed-d64bbf699317"],
Cell[1919, 59, 120, 1, 40, "WolframAlphaLong",ExpressionUUID->"b0a2630e-3f53-4611-af08-d7471b9a0e36"],
Cell[2042, 62, 284, 8, 31, "Input",ExpressionUUID->"fe7e4d81-4e4c-41c7-bac2-78b45f54dc7f"],
Cell[2329, 72, 353, 10, 31, "Input",ExpressionUUID->"8f0819ce-84fa-4900-ae3c-84dbb8628d21"],
Cell[2685, 84, 746, 22, 29, "Input",ExpressionUUID->"dd484025-cb3d-43ed-837c-22bce7318746"],
Cell[3434, 108, 660, 18, 43, "Input",ExpressionUUID->"8deec363-a9f3-48eb-99e1-5c95acefd0fd"],
Cell[4097, 128, 1517, 43, 43, "Input",ExpressionUUID->"309e66b9-b702-490d-ae3f-f6816d20723f"],
Cell[5617, 173, 411, 14, 57, "Input",ExpressionUUID->"42ae6f8d-bb17-48ea-82a5-a3b513444999"],
Cell[6031, 189, 673, 19, 43, "Input",ExpressionUUID->"af64cb93-a681-4ef9-8e78-20a6ea2df043"],
Cell[6707, 210, 336, 8, 43, "Input",ExpressionUUID->"b03ac6d8-d587-4955-a6a1-a569b5b04e6e"],
Cell[7046, 220, 559, 17, 44, "Input",ExpressionUUID->"db362b1d-1dc7-43f8-bce5-a7479299e8f5"],
Cell[7608, 239, 489, 15, 44, "Input",ExpressionUUID->"4385ba25-0541-4723-bc5b-cd7135470630"],
Cell[8100, 256, 578, 12, 60, "Input",ExpressionUUID->"56eda9d5-33fc-44e5-87f3-90897b8b160a"],
Cell[8681, 270, 658, 19, 44, "Input",ExpressionUUID->"532bd8f9-9a80-48b0-aca6-2e16772335bc"],
Cell[9342, 291, 641, 20, 44, "Input",ExpressionUUID->"f443be38-7bd7-4932-846a-9a88209e1fec"],
Cell[9986, 313, 408, 10, 44, "Input",ExpressionUUID->"10e5fb00-fdb7-416d-b0a5-77d762267fdb"],
Cell[10397, 325, 412, 10, 44, "Input",ExpressionUUID->"5332f784-cec3-4317-b328-54b5f14daf32"],
Cell[10812, 337, 573, 14, 44, "Input",ExpressionUUID->"d0976bd1-d9b2-4281-8a7a-3a821dcdf625"],
Cell[11388, 353, 685, 21, 44, "Input",ExpressionUUID->"90234307-2bfa-430d-9383-e8b824a3f799"],
Cell[12076, 376, 387, 10, 31, "Input",ExpressionUUID->"1fd067e8-f621-4ccf-8bf0-b5bdf2af2dad"],
Cell[12466, 388, 186, 2, 40, "WolframAlphaLong",ExpressionUUID->"e8584fee-db61-4f4a-ab76-ca9a692925d9"],
Cell[CellGroupData[{
Cell[12677, 394, 182, 3, 74, "Chapter",ExpressionUUID->"a1ae286e-16ce-4933-be06-63ea1a78ca0b"],
Cell[12862, 399, 184, 3, 37, "Text",ExpressionUUID->"006ef8d6-af5c-4c4d-b82a-336e8d241e34"],
Cell[13049, 404, 1002, 17, 110, "Input",ExpressionUUID->"b0985dcf-4af9-43b3-ae4e-abe3078323c7"],
Cell[14054, 423, 264, 6, 62, "Text",ExpressionUUID->"f2cc83e7-48b6-464c-8a14-0cde27a4ec7a"],
Cell[CellGroupData[{
Cell[14343, 433, 540, 11, 67, "ExternalLanguage",ExpressionUUID->"3ea495a9-c8e9-4ff3-898f-5511770a78af"],
Cell[14886, 446, 236, 5, 33, "Output",ExpressionUUID->"78d4e7b1-3a4f-4f63-92cd-6b0ef3418681"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15159, 456, 224, 3, 50, "ExternalLanguage",ExpressionUUID->"27f6e6da-216e-4e53-b96c-df4c28306d13"],
Cell[15386, 461, 237, 5, 33, "Output",ExpressionUUID->"17cb8cfc-f85e-4d51-b5df-50dab01be1db"]
}, Open  ]],
Cell[15638, 469, 431, 9, 101, "ExternalLanguage",ExpressionUUID->"58643dfb-82e6-4883-a28a-c7634b249497"],
Cell[16072, 480, 276, 6, 67, "ExternalLanguage",ExpressionUUID->"ec25026d-b3a1-438a-95d2-c8dda21583ab"],
Cell[16351, 488, 226, 4, 29, "Input",ExpressionUUID->"7a629271-a7e8-49bc-ad1a-9b3c4e3cfe83"],
Cell[CellGroupData[{
Cell[16602, 496, 222, 3, 40, "WolframAlphaLong",ExpressionUUID->"dc79cafa-50fa-4053-be02-f538a9b863e0"],
Cell[16827, 501, 132582, 2581, 1433, "Print",ExpressionUUID->"683a20ee-225e-47cd-99d1-9d4864eec7d9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149446, 3087, 343, 9, 29, "Input",ExpressionUUID->"b2209187-2492-443b-9c89-c7108ca773db"],
Cell[149792, 3098, 386, 13, 57, "Output",ExpressionUUID->"f80d9680-d21b-44c2-a6bb-4f641aaac731"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150215, 3116, 187, 2, 40, "WolframAlphaLong",ExpressionUUID->"b7c64489-b2c3-47e9-a17c-a124785485b8"],
Cell[150405, 3120, 43423, 916, 1505, "Print",ExpressionUUID->"493da36b-c960-4119-9491-a49735a8c59f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193865, 4041, 181, 3, 72, "Section",ExpressionUUID->"b46a2f46-3b42-4ed4-9934-25e51dab12ff"],
Cell[CellGroupData[{
Cell[194071, 4048, 664, 17, 76, "Input",ExpressionUUID->"736d6744-bcd8-4066-9ac0-cb5cc16fd29e"],
Cell[194738, 4067, 946, 28, 47, "Output",ExpressionUUID->"8d7557df-1f5d-45eb-a0ed-b191b45d9b3c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[195721, 4100, 419, 10, 29, "Input",ExpressionUUID->"982c01d7-92da-40c1-88b3-5cf41d647c54"],
Cell[196143, 4112, 864, 27, 111, "Output",ExpressionUUID->"963c27af-3027-4cb5-9867-2902be286261"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197044, 4144, 280, 5, 29, "Input",ExpressionUUID->"d5ec3256-ce73-44ca-b41e-c42ec5e207fb"],
Cell[197327, 4151, 847, 26, 104, "Output",ExpressionUUID->"311a8f84-c3bf-4ca6-b5b3-0d10bf9b6b78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[198211, 4182, 486, 12, 43, "Input",ExpressionUUID->"05a06916-8256-4cc7-bf33-f2eb38bc9b61"],
Cell[198700, 4196, 888, 31, 51, "Output",ExpressionUUID->"4af507fa-af59-42ba-a265-44f38aba0c2f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199625, 4232, 286, 6, 29, "Input",ExpressionUUID->"c20bbdbe-39b1-419f-84f9-3ba1fbbe3634"],
Cell[199914, 4240, 1512, 48, 65, "Output",ExpressionUUID->"588a8318-274b-402b-b28c-311186b278bd"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

